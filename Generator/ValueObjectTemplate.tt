<#@ template language="C#" visibility="internal" linePragmas="false" #>
<#@ import namespace="ValueObjectGenerator" #>
//
// Generated by ValueGenerator
// DO NOT EDIT THIS FILE
//
using System;
using System.Diagnostics.CodeAnalysis;

<# if( !string.IsNullOrEmpty( Namespace ) ) { #>
namespace <#= Namespace #>
{
<# } #>
    public partial class <#= Name #> : IEquatable<<#= Name #>><#= Option.HasFlag( OptionFlags.Comparable ) ? $", IComparable<{Name}>" : "" #>
    {
        public <#= BaseTypeName #> Value { get; }

        public <#= Name #>( <#= BaseTypeName #> value )
        {
<# if( Option.HasFlag( OptionFlags.Validate ) ) { #>
            Value = Validate( value );
<# } else { #>
            Value = value;
<# } #>
        }

<# if( Option.HasFlag( OptionFlags.Validate ) ) { #>
        protected virtual partial <#= BaseTypeName #> Validate( <#= BaseTypeName #> value );
<# } #>

        public override string ToString()
        {
            return Value.ToString();
        }

        //----------------------------------------------------------------------
        // Equality
        //----------------------------------------------------------------------
        public bool Equals( [AllowNull] <#= Name #> other )
        {
            if( ReferenceEquals( null, other ) )
            {
                return false;
            }

            if( ReferenceEquals( this, other ) )
            {
                return true;
            }

            return Value == other.Value;
        }

        public override bool Equals( [AllowNull] object obj )
        {
            if( ReferenceEquals( null, obj ) )
            {
                return false;
            }

            if( ReferenceEquals( this, obj ) )
            {
                return true;
            }

            if( obj.GetType() != this.GetType() )
            {
                return false;
            }

            return Equals( (<#= Name #>)obj );
        }

        // HashCode
        public override int GetHashCode() => Value.GetHashCode();

        // Operator ==, !=
        public static bool operator ==( <#= Name #> a, <#= Name #> b )
        {
            if( a is null && b is null )
            {
                return true;
            }
            if( a is null || b is null )
            {
                return false;
            }
            return a.Value.Equals( b.Value );
        }

        public static bool operator !=( <#= Name #> a, <#= Name #> b )
        {
            if( a is null && b is null )
            {
                return false;
            }
            if( a is null || b is null )
            {
                return true;
            }
            return !a.Value.Equals( b.Value );
        }

        //----------------------------------------------------------------------
        // <#= Option.HasFlag( OptionFlags.Implicit ) ? "Implicit" : "Explicit" #>
        //----------------------------------------------------------------------
        public static <#= Option.HasFlag( OptionFlags.Implicit ) ? "implicit" : "explicit" #> operator <#= BaseTypeName #>( <#= Name #> x )
        {
            return x.Value;
        }

        public static implicit operator <#= Name #>( <#= BaseTypeName #> value )
        {
            return new <#= Name #>( value );
        }

<# if( Option.HasFlag( OptionFlags.Comparable ) ) { #>
        //----------------------------------------------------------------------
        // Comparable
        //----------------------------------------------------------------------
        public int CompareTo( <#= Name #> other )
        {
            if( ReferenceEquals( this, other ) )
            {
                return 0;
            }

            if( ReferenceEquals( null, other ) )
            {
                return 1;
            }

            return Value.CompareTo( other.Value );
        }
<# } #>

    }

<# if( !string.IsNullOrEmpty( Namespace ) ) { #>
}
<# } #>
